[
{
	"uri": "https://vonage-voice-api-workshop.nexmodev.com/first-call/",
	"title": "Make Your First Call",
	"tags": [],
	"description": "",
	"content": "Write some code that calls your cellphone\nYou will need:\n A Nexmo account if you don't have one already. Sign up here: https://dashboard.nexmo.com/sign-up A Nexmo phone number to make calls with. You can check your existing numbers and buy numbers on the dashboard. An application - you need both the application UUID and the private key file copied somewhere safe. From the dashboard, visit \u0026ldquo;Voice\u0026rdquo; and then \u0026ldquo;Create an application\u0026rdquo;. Give your new application a name and choose \u0026ldquo;Generate public and private key\u0026rdquo;; your browser will download the private key. Set your application to have Voice capabilities (you can use example.com URLs for now, we will update these later) and save it. Once you have created the application, link the Nexmo number you will use. A number you can phone (probably your cellphone). Some sort of working tech stack. Our examples are NodeJS and PHP but you should feel free to use whatever technology you know how to make API calls with!  Optional, but recommended:\n The Nexmo CLI tool may be a nicer way to work with the number purchase, application creation, etc. The Server SDK for your tech stack - we have PHP, Python, Ruby, NodeJS, Java, .NET (and a semi-official Go SDK)  Here's the code to get you started, replace the placeholder values in your chosen code:\n NEXMO_APPLICATION_PRIVATE_KEY_PATH: The path to the private key file you saved when creating the application NEXMO_APPLICATION_ID: The UUID of your application NEXMO_NUMBER: Your Nexmo number that the call will be made from. For example 447700900000. TO_NUMBER: The number you would like to call to in E.164 format. For example 447700900001 (note that this must include the dialling code, so if it's a US number, it should start with 1).  Javascript\nPrepare your dependencies: npm install nexmo\nconst nexmo = new Nexmo({ apiKey: NEXMO_API_KEY, apiSecret: NEXMO_API_SECRET, applicationId: NEXMO_APPLICATION_ID, privateKey: NEXMO_APPLICATION_PRIVATE_KEY_PATH }) nexmo.calls.create({ to: [{ type: \u0026#39;phone\u0026#39;, number: TO_NUMBER }], from: { type: \u0026#39;phone\u0026#39;, number: NEXMO_NUMBER }, ncco: [{ \u0026#34;action\u0026#34;: \u0026#34;talk\u0026#34;, \u0026#34;text\u0026#34;: \u0026#34;This is a text to speech call from Nexmo\u0026#34; }] }) PHP\nPrepare your dependencies: composer require nexmo/client\n\u0026lt;?php require \u0026#39;vendor/autoload.php\u0026#39;; $keypair = new \\Nexmo\\Client\\Credentials\\Keypair( file_get_contents(NEXMO_APPLICATION_PRIVATE_KEY_PATH), NEXMO_APPLICATION_ID ); $client = new \\Nexmo\\Client($keypair); $call = $client-\u0026gt;calls()-\u0026gt;create([ \u0026#39;to\u0026#39; =\u0026gt; [[ \u0026#39;type\u0026#39; =\u0026gt; \u0026#39;phone\u0026#39;, \u0026#39;number\u0026#39; =\u0026gt; TO_NUMBER ]], \u0026#39;from\u0026#39; =\u0026gt; [ \u0026#39;type\u0026#39; =\u0026gt; \u0026#39;phone\u0026#39;, \u0026#39;number\u0026#39; =\u0026gt; NEXMO_NUMBER ], \u0026#39;ncco\u0026#39; =\u0026gt; [ [ \u0026#39;action\u0026#39; =\u0026gt; \u0026#39;talk\u0026#39;, \u0026#39;text\u0026#39; =\u0026gt; \u0026#39;This is a text to speech call from Nexmo\u0026#39; ] ] ]); print_r($call); Put this code into index.php, and run it with php -f index.php.\nCheck out the code examples in these and other languages on the Nexmo Developer Portal.\nRun your code and answer your phone!\nNext Steps: Customise your call What would you like to hear? Check out our NCCO reference documentation to learn what else you can do, if you'd like your spoken greeting to have a bit more expression you can investigate SSML (Speech Synthesis Markup Language).\nNext Steps: Track events (insight and debugging tactic) Go back to the dashboard and configure the application's event_url endpoint. You can either point this to:\n your application (probably using ngrok), we'll be doing another incoming webhook in the next exercise anyway a tool such as the Voice Event Logger a general webhook receiver like Requestbin (still available at http://bin.on.dockerize.io/ and http://requestbin.net) or Postbin  "
},
{
	"uri": "https://vonage-voice-api-workshop.nexmodev.com/answer-call/",
	"title": "Call Your Application",
	"tags": [],
	"description": "",
	"content": "Make a phone call, have your application answer it\nTo receive incoming calls, you need a publicly-available URL that will respond with a NCCO telling Nexmo what to do with the call. One thing that's different from the previous example is that it does not need an API keys - the Nexmo server will call your application this time rather than the other way around!\n  Start by adding a simple route to your application, the code samples here are to help you get started, or you can of course improvise.\nJavaScript\nPrepare your dependencies: npm install nexmo express\nconst app = require(\u0026#39;express\u0026#39;)() const onInboundCall = (request, response) =\u0026gt; { const from = request.query.from const fromSplitIntoCharacters = from.split(\u0026#39;\u0026#39;).join(\u0026#39; \u0026#39;) const ncco = [{ action: \u0026#39;talk\u0026#39;, text: `Thank you for calling from ${fromSplitIntoCharacters}` }] response.json(ncco) } app.get(\u0026#39;/webhooks/answer\u0026#39;, onInboundCall) app.listen(3000) Save the code sample to index.js and then run node index.js.\nPHP\nThis example uses the Slim Framework (v3) microframework for some lightweight input/output handling and routing. To include this in your project, use Composer:\ncomposer require nexmo/client slim/slim:3.11\nWith the dependencies in place, here's some code to give a /webhooks/answer endpoint that returns an NCCO:\n\u0026lt;?php use \\Psr\\Http\\Message\\ServerRequestInterface as Request; use \\Psr\\Http\\Message\\ResponseInterface as Response; require \u0026#39;vendor/autoload.php\u0026#39;; $app = new \\Slim\\App; $app-\u0026gt;get(\u0026#39;/webhooks/answer\u0026#39;, function (Request $request, Response $response) { $params = $request-\u0026gt;getQueryParams(); $fromSplitIntoCharacters = implode(\u0026#34; \u0026#34;, str_split($params[\u0026#39;from\u0026#39;])); $ncco = [ [ \u0026#39;action\u0026#39; =\u0026gt; \u0026#39;talk\u0026#39;, \u0026#39;text\u0026#39; =\u0026gt; \u0026#39;Thank you for calling from \u0026#39;.$fromSplitIntoCharacters ] ]; return $response-\u0026gt;withJson($ncco); }); $app-\u0026gt;run(); Save the code into index.php. Then try using the built-in PHP webserver to serve the code:\nphp -S localhost:3000\nAgain, there are code examples in other languages if you prefer.\n  Test your endpoint by requesting http://localhost:3000/webhook/answer in your browser. You should see some JSON returned.\n  Next, your local URL needs to be publicly available. One way to do this is to use ngrok:\nngrok http 3000\nWhen ngrok starts the tunnel, it will show you your URL, something like https://abc123.ngrok.io - copy the URL from your ngrok console as we will need it shortly.\n  Back in the dashboard, you can edit the Answer URL of your application, by pasting the ngrok URL and adding /webhooks/answer to the end of it, to make something like https://abc123.ngrok.com/webhooks/answer.\n  Call your application by making a call from your cellphone to the Nexmo number linked to your application. You should hear the spoken greeting giving the number you are calling from.\n  Next Steps: A more interesting greeting We've shared our standard \u0026ldquo;answer a call\u0026rdquo; example but it isn't particularly interesting! What do you wish your application would do? How about:\n A talking clock A randomly chosen uplifting message Some music  Use the NCCO reference documentation to try some alternative content for your Answer URL.\nFor more ideas, there's a set of NCCO Examples on GitHub that might help you along the way.\n"
},
{
	"uri": "https://vonage-voice-api-workshop.nexmodev.com/user-input/",
	"title": "Interact with your user",
	"tags": [],
	"description": "",
	"content": "Making a call, or receiving one, is great but what next? In this final exercise we'll interact with our user. To keep things simple, we'll prompt them to input digits on their keypad, but the same approaches would work with spoken interactions on both sides.\nThe outline of the process looks something like this:\n Create an NCCO to prompt the user to input some digits by using a talk action and then an input action. The input action accepts a URL so use your ngrok URL with a suffix - our examples use /webhooks/dtmf. When the user sends some input, we'll receive a webhook containing some data to identify the call (see the detail of the webhook on the Developer Portal) Using the data that arrived in the webhook, we can return a new NCCO with custom content.  Start a new application, we have some new code for you!\nJavaScript\nPrepare your dependencies: npm install nexmo express body-parser\nconst app = require(\u0026#39;express\u0026#39;)() const bodyParser = require(\u0026#39;body-parser\u0026#39;) app.use(bodyParser.json()) const onInboundCall = (request, response) =\u0026gt; { const ncco = [ { action: \u0026#39;talk\u0026#39;, text: \u0026#39;Please enter a digit\u0026#39; }, { action: \u0026#39;input\u0026#39;, eventUrl: [`${request.protocol}://${request.get(\u0026#39;host\u0026#39;)}/webhooks/dtmf`] } ] response.json(ncco) } const onInput = (request, response) =\u0026gt; { const dtmf = request.body.dtmf const ncco = [{ action: \u0026#39;talk\u0026#39;, text: `You pressed ${dtmf}` }] response.json(ncco) } app .get(\u0026#39;/webhooks/answer\u0026#39;, onInboundCall) .post(\u0026#39;/webhooks/dtmf\u0026#39;, onInput) app.listen(3000) Put this code into index.js and start the server with node index.js.\nPHP\nAgain, there is a Slim Framework dependency so use composer require slim/slim:3.11 to bring that into your project.\n\u0026lt;?php use \\Psr\\Http\\Message\\ServerRequestInterface as Request; use \\Psr\\Http\\Message\\ResponseInterface as Response; require \u0026#39;vendor/autoload.php\u0026#39;; $app = new \\Slim\\App; $app-\u0026gt;get(\u0026#39;/webhooks/answer\u0026#39;, function (Request $request, Response $response) { $uri = $request-\u0026gt;getUri(); $ncco = [ [ \u0026#39;action\u0026#39; =\u0026gt; \u0026#39;talk\u0026#39;, \u0026#39;text\u0026#39; =\u0026gt; \u0026#39;Please enter a digit\u0026#39; ], [ \u0026#39;action\u0026#39; =\u0026gt; \u0026#39;input\u0026#39;, \u0026#39;eventUrl\u0026#39; =\u0026gt; [ $uri-\u0026gt;getScheme().\u0026#39;://\u0026#39;.$uri-\u0026gt;getHost().\u0026#39;:\u0026#39;.$uri-\u0026gt;getPort().\u0026#39;/webhooks/dtmf\u0026#39; ] ] ]; return $response-\u0026gt;withJson($ncco); }); $app-\u0026gt;post(\u0026#39;/webhooks/dtmf\u0026#39;, function (Request $request, Response $response) { $params = $request-\u0026gt;getParsedBody(); $ncco = [ [ \u0026#39;action\u0026#39; =\u0026gt; \u0026#39;talk\u0026#39;, \u0026#39;text\u0026#39; =\u0026gt; \u0026#39;You pressed \u0026#39;.$params[\u0026#39;dtmf\u0026#39;] ] ]; return $response-\u0026gt;withJson($ncco); }); $app-\u0026gt;run(); Place this code in index.php, then use the built-in webserver:\nphp -S localhost:3000\nRun your code - if your ngrok server is still running from the previous example then you should be able to simply call your Nexmo number from your cellphone again. Don't forget to bring up the dial pad ready to enter a digit!\nNext Steps: Expand to make a simple IVR How about expanding your example to make a small IVR (Interactive Voice Response) system? \u0026ldquo;Press one for sales, two for support \u0026hellip;\u0026rdquo; you get the idea. Or go sillier and base something on my colleague Tony's Dial-a-Carol system!\nNext Steps: Record the Call Nexmo enables call recording, which is useful in many different applications. Take a look at the NCCO documentation for the record action and record the call.\nYou need to be authenticated to be able to download the call recording - check the first example we did for how to create the client with the application and key you need. There are also code examples on the developer portal to help you along.\n"
},
{
	"uri": "https://vonage-voice-api-workshop.nexmodev.com/build-ivr/",
	"title": "Building an IVR",
	"tags": [],
	"description": "",
	"content": "An IVR or Interactive Voice Response is a menu of options presented to a caller, they then navigate that menu using the buttons on their keypad to send DTMF (Dual Tone Multi Frequency) signals. Each option on the IVR can direct the call to a different path, for example forwarding the call to a specific destination, playing a recorded piece of information or even triggering another service such as an SMS. IVRs are the fundamental navigation method of Voice Call applications. An IVR can have multiple levels to it, where selection of one option presents the user with more options, this can go on to an infinite depth! For this activity we will just create a single level IVR.\nInital Call Handling Start by reusing the logic built in the previous section\nPrepare your dependencies: npm install nexmo express body-parser\nNow the code we are going to use here is going to vary slightly from the previous section's\nLet's start by creating an index.js file and just get the basics out of the way.\nrequire app and body parser, setup our routes, and set the app up to listen on port 3000\nconst app = require(\u0026#39;express\u0026#39;)() const bodyParser = require(\u0026#39;body-parser\u0026#39;) const origin_phone_number = \u0026#34;NEXMO_NUMBER\u0026#34;; const sales_office_number = \u0026#39;15558675309\u0026#39;; const base_url = \u0026#34;https://www.example.com\u0026#34;; app.use(bodyParser.json()) //When adding code, add after this line  //When adding code, add before this line const onEvent =(request, response) =\u0026gt;{ response.status(200).send(); } app .get(\u0026#39;/webhooks/answer\u0026#39;, onInboundCall) .post(\u0026#39;/webhooks/dtmf\u0026#39;, onInput) .post(\u0026#39;/webhooks/events\u0026#39;, onEvent) .post(\u0026#39;/webhooks/accountInput\u0026#39;, onAccountInput) app.listen(3000) Next we are going to want to give the user a set of options that they can choose from. Let's just have 3 options.\n Sales Customer Support Press Office  const onInboundCall = (request, response) =\u0026gt; { const ncco = [ { action: \u0026#39;talk\u0026#39;, text: \u0026#39;Hello, welcome to Acme Systems Incorporated\\\u0026#39;s Interactive Voice Response System. To speak with Sales press 1. For Customer Support press 2. For the press office, press 3\u0026#39; }, { action: \u0026#39;input\u0026#39;, eventUrl: [`${base_url}/webhooks/dtmf`], maxDigits: 1 } ] response.json(ncco) } Now we have constructed a talk action to explain the menu to the customer, and we have provided an input action for customers to send input in through.\nThe next step is to actually manage all that user input. In the previous section we simply echoed the user's input back to them. Here we are just going to switch on the different possible inputs.\n For the sales department we will connect them immediately with a representative at the sales_office_number. For the Support department, we will collect a 5 digit account number from them. For the press office, unfortunatley no one can take the call, and we haven't set up our voice mail system - so we will have to drop it.  const onInput = (request, response) =\u0026gt; { const dtmf = request.body.dtmf var ncco; switch(dtmf){ case \u0026#34;1\u0026#34;: ncco = [ { action: \u0026#39;talk\u0026#39;, text: `You have asked to speak with the Sales Department, Connecting you now.` }, { action: \u0026#39;connect\u0026#39;, from: origin_phone_number, endpoint: [ { \u0026#34;type\u0026#34;: \u0026#34;phone\u0026#34;, \u0026#34;number\u0026#34;: sales_office_number } ] } ] response.json(ncco) break; case \u0026#34;2\u0026#34;: ncco = [ { action: \u0026#39;talk\u0026#39;, text: \u0026#39;You have asked to speak with customer service, please input your 5 digit account number followed by the pound sign\u0026#39; }, { action: \u0026#39;input\u0026#39;, eventUrl: [`${base_url}/webhooks/accountInput`], timeOut: 10, maxDigits: 6, submitOnHash: true } ] response.json(ncco) break; case \u0026#34;3\u0026#34;: ncco = [ { action: \u0026#39;talk\u0026#39;, text: \u0026#39;You have asked to speak with the press office. Unfortunately no one from the press office is currently available and the recording service has yet to be implemented, please try back later\u0026#39; } ] response.json(ncco) break; default: ncco = [ { action: \u0026#39;talk\u0026#39;, text: \u0026#39;I\\\u0026#39;m sorry I didn\\\u0026#39;t understand what you entered please try again\u0026#39; } ]; response.json(ncco); break; } } Finally if they contacted the support department we will need to echo the account input back to them and tell them they'll be contacted later. Add the following into our index.js file\nconst onAccountInput =(request, response) =\u0026gt;{ const dtmf = request.body.dtmf const input = dtmf.split(\u0026#39;\u0026#39;).join(\u0026#39; \u0026#39;); const ncco = [ { action: \u0026#39;talk\u0026#39;, text: \u0026#39;Your account number is: \u0026#39; + input + \u0026#39; your case has been added and is being actively triaged, you will be contacted with an update to your case in 24 hours\u0026#39; } ]; response.json(ncco); response.status(200).send(); } With this last piece of the puzzle we're ready to go.\nTo fire this up do the following:\n run http ngrok 3000 to point your ngrok tunnel at your server   take the forwarded address and set that as your base_url in the case of the above example this will be http://c1b4d1a1.ngrok.io replace the sales_office_number with a phone number you want it to call replace the origin_phone_number with your nexmo number run node index.js  And that's it! - now all you need to is call into your voice app with your phone and you'll be dialed into the IVR\n"
},
{
	"uri": "https://vonage-voice-api-workshop.nexmodev.com/record-a-call/",
	"title": "Record a Call",
	"tags": [],
	"description": "",
	"content": "Now that we have successfully implemented the basic IVR we still have the matter of the press office to attend to. No one is currently present from the press office to handle our call so we are going to need to allow for a mechanism for folks calling into our IVR to leave a message for the press office.\nWe're going to do that by allowing them to leave a message with the press office.\nRemember from the onInput callback from the previous section - the switch for input 3.\ncase \u0026#34;3\u0026#34;: ncco = [ { action: \u0026#39;talk\u0026#39;, text: \u0026#39;You have asked to speak with the press office. Unfortunately no one from the press office is currently available and the recording service has yet to be implemented, please try back later\u0026#39; } ] response.json(ncco) break; We are going to edit this snippet of code to actually instruct Nexmo to preform the voice recording for us. To do this, we are going to add another action. Let's modify the snippet of code above to hold this record action.\n"
},
{
	"uri": "https://vonage-voice-api-workshop.nexmodev.com/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://vonage-voice-api-workshop.nexmodev.com/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://vonage-voice-api-workshop.nexmodev.com/",
	"title": "Voice API Workshop",
	"tags": [],
	"description": "",
	"content": ""
}]